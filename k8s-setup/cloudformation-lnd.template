{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "LND devop test",

  "Parameters": {

    "vpcid": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The vpcid for the target group"
    },

    "subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of subnets for the load balancer"
    },

    "s3clustersetup": {
      "Default": "lnd-cluster-setup",
      "Description" : "S3 bucket holding the setup scripts",
      "Type": "String",
    },
  },

  "Resources" : {
    "MasterInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": ["K8sRepo", "Install", "Setup"]
          },
          "K8sRepo": {
            "files": {
              "/etc/yum.repos.d/k8s-s3.repo": {
                "content": { "Fn::Join" : ["", [
                   "[local]\n",
                   "name=Kubernetes local\n",
                   "baseurl=http://k8s-s3-repo.s3-website-us-west-2.amazonaws.com/$basearch\n",
                   "enabled=1\n",
                   "protect=1\n",
                   "gpgcheck=0\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root" 
              }
            }
          },
          "Install": {
            "packages": {
              "yum": {
                "jq": [],
                "git": [],
                "docker": [],
                "kubeadm": []
              }
            },
            "services": {
              "sysvinit": {
                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "kubelet": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },
          "Setup": {
            "files": {
              "/etc/cloud-formation.env": {
                "content": { "Fn::Join" : ["", [
                    "AWS_REGION=\"", {"Ref":"AWS::Region"}, "\"\n",
                    "STACK_ID=\"", {"Ref":"AWS::StackId"}, "\"\n",
                    "STACK_NAME=\"", {"Ref":"AWS::StackName"}, "\"\n",
                    "SETUP_BUCKET=\"", {"Ref":"s3clustersetup"}, "\"\n",
                    "ELB_DNS=\"", {"Fn::GetAtt":["Balancer1", "DNSName"]}, "\"\n",
                    "KONG_PROXY_TARGET_GROUP=\"", {"Ref":"TargetGroupKongProxy"}, "\"\n",
                    "EXT_SECURITY_GROUP=\"", {"Ref":"ExtSecurityGroup"}, "\"\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root",
              },
              "/tmp/form-master.sh": {
                "source": "s3://lnd-cluster-setup/k8s-setup/form-master.sh",
                "mode": "000644",
                "owner": "root",
                "group": "root",
              },
              "/tmp/confkong.sh": {
                "source": "s3://lnd-cluster-setup/k8s-setup/confkong.sh",
                "mode": "000644",
                "owner": "root",
                "group": "root",
              },
              "/tmp/reg-elb.sh": {
                "source": "s3://lnd-cluster-setup/k8s-setup/reg-elb.sh",
                "mode": "000644",
                "owner": "root",
                "group": "root",
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-a9d09ed1",
        "InstanceType": "t2.micro",
        "IamInstanceProfile": { "Ref": "NodeInstanceProfile" },
        "SecurityGroups": [{"Ref":"ClusterSecurityGroup"}, {"Ref":"ExtSecurityGroup"}],
        "SourceDestCheck": "false",
        "KeyName": "devop-lnd",
        "UserData": { "Fn::Base64" : { "Fn::Join" : [ "", [
             "#!/bin/bash -x\n",
             "### /bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MasterInstance ",
             "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "source /etc/cloud-formation.env \n",

             "/bin/bash /tmp/form-master.sh > form-master.log 2>&1 \n",

             "# chmod +x confkong.sh\n",
             "# /root/k8s-setup/confkong.sh \"", {"Fn::GetAtt":["Balancer1", "DNSName"]}, "\" >> confkong.log \n",

             "# chmod +x reg-elb.sh\n",
             "# /root/k8s-setup/reg-elb.sh \"", {"Ref":"AWS::Region"} , "\" \"", {"Ref":"AWS::StackName"}, "\" \"", {"Ref":"TargetGroupKongProxy"}, "\" \"", {"Ref":"ExtSecurityGroup"}, "\" >> reg-elb.log\n",

             "echo \"Done! stackName: \"${STACK_NAME}\" stackId: \"${STACK_ID}\" >> form-master.log \n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MasterInstance",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout" : "PT30M"
        }
      }
    },
    "NodeInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": ["Install"]
          },
          "Install": {
            "files": {
              "/etc/yum.repos.d/k8s-s3.repo": {
                "content": { "Fn::Join" : ["", [
                   "[local]\n",
                   "name=Kubernetes local\n",
                   "baseurl=http://k8s-s3-repo.s3-website-us-west-2.amazonaws.com/$basearch\n",
                   "enabled=1\n",
                   "protect=1\n",
                   "gpgcheck=0\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root" 
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-a9d09ed1",
        "InstanceType": "t2.micro",
        "IamInstanceProfile": { "Ref": "NodeInstanceProfile" },
        "SecurityGroups": [{"Ref":"ClusterSecurityGroup"}, {"Ref":"ExtSecurityGroup"}],
        "SourceDestCheck": "false",
        "KeyName": "devop-lnd",
        "UserData": { "Fn::Base64" : { "Fn::Join" : [ "", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MasterInstance ",
             "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# mkdir /root/k8s-setup\n",
             "# cd /root/k8s-setup\n",
             "# aws s3 cp --recursive s3://lnd-cluster-setup/k8s-setup . \n",
             "# chmod +x form-node.sh\n",
             "# /root/k8s-setup/form-node.sh \"", {"Ref":"AWS::StackId"} , "\" \"", {"Ref":"s3clustersetup"} , "\" > form-node.log 2>&1\n",
             "echo \"Done! stackName: ", {"Ref":"AWS::StackName"}, " stackId: ", {"Ref": "AWS::StackId"}, "\" >> form-node.log\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource NodeInstance",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout" : "PT30M"
        }
      }
    },

    "NodeRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vpc",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                 {
                   "Effect": "Allow",
                   "Action": [
                     "ec2:CreateNetworkInterface",
                     "ec2:AttachNetworkInterface",
                     "ec2:DeleteNetworkInterface",
                     "ec2:DetachNetworkInterface",
                     "ec2:DescribeNetworkInterfaces",
                     "ec2:DescribeInstances",
                     "ec2:ModifyNetworkInterfaceAttribute",
                     "ec2:AssignPrivateIpAddresses"
                   ],
                   "Resource": [
                     "*"
                   ]
                 },
                 {
                   "Effect": "Allow",
                   "Action": "tag:TagResources",
                   "Resource": "*"
                 }
              ]
            }
          },
          {
            "PolicyName": "ecr",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetRepositoryPolicy",
                        "ecr:DescribeRepositories",
                        "ecr:ListImages",
                        "ecr:DescribeImages",
                        "ecr:BatchGetImage",
                        "ecr:InitiateLayerUpload",
                        "ecr:UploadLayerPart",
                        "ecr:CompleteLayerUpload",
                        "ecr:PutImage"
                      ],
                      "Resource": "*"
                     }
              ]
            }
          },
          {
            "PolicyName": "s3",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                 {
                   "Effect": "Allow",
                   "Action": "s3:*",
                   "Resource": "*"
                 }
              ]
            }
          },
          {
            "PolicyName": "RegisterWithELB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                 {
                   "Effect": "Allow",
                   "Action": [
                      "elasticloadbalancing:RegisterTargets",
                      "elasticloadbalancing:DeregisterTargets"
                   ],
                   "Resource": "*"
                 }
              ]
            }
          },
          {
            "PolicyName": "ELB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeAddresses",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeClassicLinkInstances",
                    "ec2:DescribeVpcClassicLink",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:ModifyNetworkInterface",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:AttachNetworkInterface",
                    "ec2:DetachNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:AssignIpv6Addresses",
                    "ec2:UnassignIpv6Addresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeAddresses",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeClassicLinkInstances",
                    "ec2:DescribeVpcClassicLink",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:ModifyNetworkInterface",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:AttachNetworkInterface",
                    "ec2:DetachNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:AssignIpv6Addresses",
                    "ec2:UnassignIpv6Addresses",
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "NodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{"Ref": "NodeRole"}]
      }
    },

    "ExtSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Ext front security group",
        "SecurityGroupIngress": [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "ClusterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {"Fn::Join":["-",[{"Ref":"AWS::StackName"}, "ClusterSecurityGroup"]]},
        "GroupDescription": "Cluster security group",
        "SecurityGroupIngress": [
          {"IpProtocol":"-1" , "FromPort":"0" , "ToPort":"65535" , "SourceSecurityGroupName":{"Fn::Join":["-",[{"Ref":"AWS::StackName"}, "ClusterSecurityGroup"]]} }
        ]
      }
    },

    "Balancer1": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets":  {"Ref":"subnets"},
        "Type": "network"
      }
    },

    "TargetGroupKongProxy": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 30000,
        "Protocol": "TCP",
        "VpcId": {"Ref":"vpcid"}
      }
    },

    "Listener1": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {"Ref": "Balancer1"},
        "Port": "80",
        "Protocol": "TCP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {"Ref": "TargetGroupKongProxy"}
          }
        ]
      }
    }
  },

  "Outputs": {
    "MasterDns" : {
      "Description" : "Master Node DNS",
      "Value" : { "Fn::GetAtt" : [ "MasterInstance", "PublicDnsName" ] }
    },
    "MasterIp" : {
      "Description" : "Master Node Public IP",
      "Value" : { "Fn::GetAtt" : [ "MasterInstance", "PublicIp" ] }
    },
    "MasterPrivateIp" : {
      "Description" : "Master Node Private IP",
      "Value" : { "Fn::GetAtt" : [ "MasterInstance", "PrivateIp" ] }
    },
    "NodeDns" : {
      "Description" : "Node DNS",
      "Value" : { "Fn::GetAtt" : [ "NodeInstance", "PublicDnsName" ]}
    },
    "NodeIp" : {
      "Description" : "Node Public IP",
      "Value" : { "Fn::GetAtt" : [ "NodeInstance", "PublicIp" ]}
    },
    "NodePrivateIp" : {
      "Description" : "Node Private IP",
      "Value" : { "Fn::GetAtt" : [ "NodeInstance", "PrivateIp" ]}
    }
  }
}

